const unitLabels = {
  // Temperature
  C: "°C",
  F: "°F",
  // Barometer
  mbar: "mbar",
  inHg: "inHg",
  hPa: "hPa",
  // Wind
  kph: "km/h",
  mph: "mph",
  m_per_s: "m/s",
  knot: "kn", 
  // Rain
  mm: "mm",
  inch: "in",
  // Rain rate
  mm_per_hour: "mm/h",
  in_per_hour: "in/h",
  // Humidity
  percent: "%"
};

function getUnitLabel(unit) {
  if (!unit) return "";
  return unitLabels[unit] || unit;
}

function updateElement(observationType, value, unit) {
  const element = document.getElementById(observationType);
  if (!element) {
    return;
  }
  const formattedValue = parseFloat(value).toFixed(2); //TODO customize decimal places
  let label = getUnitLabel(unit);
  if (observationType.toLowerCase().includes("humidity")) {
    label = "%";
  }
  element.innerHTML = formattedValue + " " + label;
}

function animateLight() {
  var indicator = document.getElementById("indicator");
  indicator.classList.add("animate");
  setTimeout(function() {
    indicator.classList.remove("animate");
  }, 1000);
}


const clientID = "clientID-" + parseInt(Math.random() * 100);
const host = "$Extras.mqtt_broker";
const port = parseInt("$Extras.mqtt_port", 10);
const topic = "$Extras.mqtt_topic";
// const useSSL = "Extras.mqtt_ws_ssl" === "true"; 

const client = new Paho.MQTT.Client(host, port, clientID);

client.onConnectionLost = onConnectionLost;
client.onMessageArrived = onMessageArrived;

const indicator = document.getElementById("indicator");
const indicator1 = document.getElementById("indicator-1");
const mqttStatusElem = document.getElementById("mqttStatus");

const statusConnecting = "$obs.label.mqttConnecting";
const statusConnected = "$obs.label.mqttConnected";
const statusUpdate = "$obs.label.mqttUpdate";

mqttStatusElem.innerHTML = statusConnecting;
indicator.style.backgroundColor = "#eab208";
indicator1.style.backgroundColor = "#eab208";
client.connect({
  onSuccess: onConnect,
  useSSL: true, 
  onFailure: onConnectionLost 
});


function onConnect() {
  mqttStatusElem.innerHTML = statusConnected;
  indicator.style.backgroundColor = "#eab208";
  indicator1.style.backgroundColor = "#eab208";
  client.subscribe(topic);
}

function onConnectionLost(responseObject) {
  if (responseObject.errorCode !== 0) {
    mqttStatusElem.innerHTML = `$obs.label.mqttLost
                                #if $getVar('Extras.web_url', None)
                                  <a href="$Extras.web_url" class="underline ml-2">$obs.label.reloadPage</p>
                                #end if
                                `;
    indicator.style.backgroundColor = "#ef4444"; 
    indicator1.style.backgroundColor = "#ef4444";
    console.log("onConnectionLost: " + responseObject.errorMessage);
  }
}

function onMessageArrived(message) {
  indicator.style.backgroundColor = "#22c55e";
  indicator1.style.backgroundColor = "#22c55e";
  animateLight();

  const data = JSON.parse(message.payloadString);

  if ("dateTime" in data) {
    const lastUpdate = new Date(data["dateTime"] * 1000);
    mqttStatusElem.innerHTML = statusUpdate + ' ' + lastUpdate.toLocaleTimeString("$lang");
  }

  for (const key in data) {
    if (key === "dateTime" || key === "usUnits") {
      continue;
    }

    // "outTemp_C" -> ["outTemp", "C"]
    const parts = key.split('_');
    const observationType = parts[0]; 
    const unit = parts.slice(1).join('_');

    const value = data[key];
    updateElement(observationType, value, unit);
  }
}